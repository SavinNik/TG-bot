import os
import random

from telebot import types, TeleBot, custom_filters
from telebot.states import StatesGroup, State
from telebot.storage import StateMemoryStorage

from DB.db_funcs import add_connect, add_user, get_target_word, get_other_words_for_answer, check_user, add_user_words, \
    delete_words

try:
    conn = add_connect()
except Exception as e:
    print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
    exit(1)

print('Start telegram bot...')

cursor = conn.cursor()

state_storage = StateMemoryStorage()
token_bot = os.getenv('TG_TOKEN')
bot = TeleBot(token_bot, state_storage=state_storage)

buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    add_word = State()
    delete_word = State()


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    user = check_user(cid)
    if not user:
        add_user(cid)
        bot.send_message(cid,
                         "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º "
                         "–¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ"
                         "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é "
                         "–±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
                         "- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
    else:
        bot.send_message(cid, "–ü—Ä–æ–¥–æ–ª–∂–∏–º?")

    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []

    target_word, translate = get_target_word(cid)

    target_word_btn = types.KeyboardButton(translate)

    others = get_other_words_for_answer(cid, target_word)
    other_words_buttons = [types.KeyboardButton(word) for word in others]

    buttons = [target_word_btn] + other_words_buttons
    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_card(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text not in [Command.ADD_WORD, Command.DELETE_WORD],
                     content_types=['text'])
def message_reply(message):
    text = message.text.strip()
    markup = types.ReplyKeyboardMarkup(row_width=2)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('translate_word')
        if target_word is None:
            bot.send_message(message.chat.id, "–¶–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§Ô∏è", hint]
            hint = show_hint(*hint_text)
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ù§Ô∏è'
                    break
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            else:
                bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['target_word']}")

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ß–ï–†–ï–ó –ü–†–û–ë–ï–õ,"
                          " –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ–≤:")
    bot.register_next_step_handler(message, user_input)


def user_input(message):
    cid = message.chat.id
    words = str(message.text).lower().strip().split()

    if len(words) != 2:
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    rus_word, eng_word = words

    try:
        if add_user_words(rus_word, eng_word, cid):
            bot.send_message(cid, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ —Å–ª–æ–≤")
        else:
            bot.send_message(cid, "–°–ª–æ–≤–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
    except Exception as error:
        bot.send_message(cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {error}")

    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, user_input_for_delete)


def user_input_for_delete(message):
    cid = message.chat.id
    word_to_delete = str(message.text).strip().lower()

    try:
        if delete_words(word_to_delete, cid):
            bot.send_message(cid, "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ")
        else:
            bot.send_message(cid, "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–∞–º–∏.")
    except Exception as error:
        bot.send_message(cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {error}")

    create_cards(message)




if __name__ == '__main__':
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling(skip_pending=True)
